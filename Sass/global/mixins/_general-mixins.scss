///
/// @file STARTERKIT/scss/global/_general_mixins.scss
/// \file STARTERKIT/scss/global/_general_mixins.scss
/// \ingroup STARTERKIT_SCSS_Global
/// \brief General mixins and functions
/// 
/// These are general mixins and functions that could be reused on 
/// multiple projects. 
/// 
/// Please include any requirements (such as variables or gems like 
/// compass, breakpoint, compass-respond) in the comments for the 
/// individual mixins below.
/// 
///

// Remove Bullets
// Remove list item styles
//
// Ex:
//   .selector {
//     @include remove-bullets;
//   }
//
@mixin remove-bullets {
  list-style: none;
  list-style-type: none;
  margin: 0;
  padding: 0;

  li {
    list-style: none;
    list-style-type: none;
    line-height: inherit;
    padding: 0;
  }

}

// Element Invisible
// Hide an element from view while staying accessible.
//
// Ex:
//   .selector {
//     @include element-invisible;
//   }
//
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {
    clip: rect(1px 1px 1px 1px); // IE6 and IE7 use the wrong syntax.
  }
  clip: rect(1px, 1px, 1px, 1px);
}

// Element Invisible Off
// Unhide an element that was previously hidden by 'Element Invisible'
//
// Ex:
//   .selector--active {
//     @include element-invisible-off;
//   }
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Font-Face
// Add @font-face snippets easily
//
// Params:
//   $family        - The font-family name
//   $file          - Optional file name if different from font-family
//
// Ex:
//   @include font-face('Fontname regular', $file: 'fontname', $path: 'alt-font/')
//
@mixin font-face($family, $file: false, $path: false) {
  $full-path: null;
  @if $file == false {
    $file: $family;
  }
  @if $path == false {
    $path: $family;
    $full-path: "#{$path}/";
  } @else {
    $full-path: $path;
  }
  @font-face {
    font-family: '#{$family}';
    src: font-url('#{$full-path}#{$file}.eot');
    src: font-url('#{$full-path}#{$file}.eot?#iefix') format('embedded-opentype'),
         font-url('#{$full-path}#{$file}.woff') format('woff'),
         font-url('#{$full-path}#{$file}.ttf') format('truetype'),
         font-url('#{$full-path}#{$file}.svg##{$family}') format('svg');
    font-weight: normal;
    font-style: normal;
  }
}

// REM
// Output a given style rule containing rem values along with an (optional)
// fallback rule for older browsers (with rem values converted to px).
//
// Params:
//   $property        - The css property name.
//   $px-values       - The value (or space-separated list of values) for the property.
//   $use-px-fallback - [ true | false ]
//
@mixin rem($property, $values, $use-px-fallback: $rem-with-px-fallback) {
  // Create a couple of empty lists as output buffers.
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if type-of($value) == number and not unitless($value) and (unit($value) == px or unit($value) == rem) {
      @if unit($value) == px {
        $px-values: join($px-values, round($value));
        $rem-values: join($rem-values, convert-length($value, rem));
      }
      @else {
        $px-values: join($px-values, round(convert-length($value, px)));
        $rem-values: join($rem-values, $value);
      }
    }
    @else {
      $px-values: join($px-values, $value);
      $rem-values: join($rem-values, $value);
    }
  }

  // Use pixel fallback for browsers that don't understand rem units.
  @if $use-px-fallback {
    #{$property}: $px-values;
  }

  // Use rem values for everyone else (overrides pixel values).
  #{$property}: $rem-values;
}

// EM Convertor
// Convert px to em
//
//   $target     - The value in px.
//   $context    - The base line height.
//
@function em($target, $context: $base-font-size) {
    @return ($target / $context)/// 1em;
}



// Retina Wrapper
// Wrap anything in a retina query
//
// Params:
//   $background-size - Optional value to set background size
//
@mixin retina-wrapper($background-size: 16px) {
  @media only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (min--moz-device-pixel-ratio: 2),
  only screen and (-o-min-device-pixel-ratio: 2 / 1),
  only screen and (min-device-pixel-ratio: 2),
  only screen and (min-resolution: 192dpi),
  only screen and (min-resolution: 2dppx) {
    @content;
    @if $background-size {
      @include background-size($background-size);
    }
  }
}

// Vertical Align Anything
@mixin vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

// Clearfix - micro version
// http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix-micro {
	&:before, &:after {
		content: " "; /* 1 */
		display: table; /* 2 */
	}
	&:after {
		clear: both;
	}
	*zoom: 1;
}

// Word wrapping
@mixin word-wrap() {
  word-break:     break-word;
  -webkit-hyphens: auto;
  -moz-hyphens:    auto;
  hyphens:         auto;
}

// Ellipsis
@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin hide-text() {
 text-indent: 100%;
 white-space: nowrap;
 overflow: hidden;
}
